// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idst_netinfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_idst_5fnetinfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_idst_5fnetinfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_idst_5fnetinfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_idst_5fnetinfer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idst_5fnetinfer_2eproto;
namespace IDSTNetInfer {
class BlobShape;
class BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class InferConfigParameter;
class InferConfigParameterDefaultTypeInternal;
extern InferConfigParameterDefaultTypeInternal _InferConfigParameter_default_instance_;
class NetInferParameter;
class NetInferParameterDefaultTypeInternal;
extern NetInferParameterDefaultTypeInternal _NetInferParameter_default_instance_;
class meanParameter;
class meanParameterDefaultTypeInternal;
extern meanParameterDefaultTypeInternal _meanParameter_default_instance_;
class normParameter;
class normParameterDefaultTypeInternal;
extern normParameterDefaultTypeInternal _normParameter_default_instance_;
}  // namespace IDSTNetInfer
PROTOBUF_NAMESPACE_OPEN
template<> ::IDSTNetInfer::BlobShape* Arena::CreateMaybeMessage<::IDSTNetInfer::BlobShape>(Arena*);
template<> ::IDSTNetInfer::InferConfigParameter* Arena::CreateMaybeMessage<::IDSTNetInfer::InferConfigParameter>(Arena*);
template<> ::IDSTNetInfer::NetInferParameter* Arena::CreateMaybeMessage<::IDSTNetInfer::NetInferParameter>(Arena*);
template<> ::IDSTNetInfer::meanParameter* Arena::CreateMaybeMessage<::IDSTNetInfer::meanParameter>(Arena*);
template<> ::IDSTNetInfer::normParameter* Arena::CreateMaybeMessage<::IDSTNetInfer::normParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IDSTNetInfer {

// ===================================================================

class BlobShape :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IDSTNetInfer.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);
  BlobShape(BlobShape&& from) noexcept
    : BlobShape() {
    *this = ::std::move(from);
  }

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobShape& operator=(BlobShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BlobShape* other);
  friend void swap(BlobShape& a, BlobShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobShape* New() const final {
    return CreateMaybeMessage<BlobShape>(nullptr);
  }

  BlobShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IDSTNetInfer.BlobShape";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idst_5fnetinfer_2eproto);
    return ::descriptor_table_idst_5fnetinfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:IDSTNetInfer.BlobShape)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dim_;
  mutable std::atomic<int> _dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idst_5fnetinfer_2eproto;
};
// -------------------------------------------------------------------

class meanParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IDSTNetInfer.meanParameter) */ {
 public:
  meanParameter();
  virtual ~meanParameter();

  meanParameter(const meanParameter& from);
  meanParameter(meanParameter&& from) noexcept
    : meanParameter() {
    *this = ::std::move(from);
  }

  inline meanParameter& operator=(const meanParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline meanParameter& operator=(meanParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const meanParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const meanParameter* internal_default_instance() {
    return reinterpret_cast<const meanParameter*>(
               &_meanParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(meanParameter* other);
  friend void swap(meanParameter& a, meanParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline meanParameter* New() const final {
    return CreateMaybeMessage<meanParameter>(nullptr);
  }

  meanParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<meanParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const meanParameter& from);
  void MergeFrom(const meanParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(meanParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IDSTNetInfer.meanParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idst_5fnetinfer_2eproto);
    return ::descriptor_table_idst_5fnetinfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean = 1;
  int mean_size() const;
  void clear_mean();
  static const int kMeanFieldNumber = 1;
  float mean(int index) const;
  void set_mean(int index, float value);
  void add_mean(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mean() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mean();

  // @@protoc_insertion_point(class_scope:IDSTNetInfer.meanParameter)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mean_;
  mutable std::atomic<int> _mean_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idst_5fnetinfer_2eproto;
};
// -------------------------------------------------------------------

class normParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IDSTNetInfer.normParameter) */ {
 public:
  normParameter();
  virtual ~normParameter();

  normParameter(const normParameter& from);
  normParameter(normParameter&& from) noexcept
    : normParameter() {
    *this = ::std::move(from);
  }

  inline normParameter& operator=(const normParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline normParameter& operator=(normParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const normParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const normParameter* internal_default_instance() {
    return reinterpret_cast<const normParameter*>(
               &_normParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(normParameter* other);
  friend void swap(normParameter& a, normParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline normParameter* New() const final {
    return CreateMaybeMessage<normParameter>(nullptr);
  }

  normParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<normParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const normParameter& from);
  void MergeFrom(const normParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(normParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IDSTNetInfer.normParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idst_5fnetinfer_2eproto);
    return ::descriptor_table_idst_5fnetinfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float norm = 1;
  int norm_size() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  float norm(int index) const;
  void set_norm(int index, float value);
  void add_norm(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      norm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_norm();

  // @@protoc_insertion_point(class_scope:IDSTNetInfer.normParameter)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > norm_;
  mutable std::atomic<int> _norm_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idst_5fnetinfer_2eproto;
};
// -------------------------------------------------------------------

class NetInferParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IDSTNetInfer.NetInferParameter) */ {
 public:
  NetInferParameter();
  virtual ~NetInferParameter();

  NetInferParameter(const NetInferParameter& from);
  NetInferParameter(NetInferParameter&& from) noexcept
    : NetInferParameter() {
    *this = ::std::move(from);
  }

  inline NetInferParameter& operator=(const NetInferParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInferParameter& operator=(NetInferParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetInferParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetInferParameter* internal_default_instance() {
    return reinterpret_cast<const NetInferParameter*>(
               &_NetInferParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NetInferParameter* other);
  friend void swap(NetInferParameter& a, NetInferParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetInferParameter* New() const final {
    return CreateMaybeMessage<NetInferParameter>(nullptr);
  }

  NetInferParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInferParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetInferParameter& from);
  void MergeFrom(const NetInferParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInferParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IDSTNetInfer.NetInferParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idst_5fnetinfer_2eproto);
    return ::descriptor_table_idst_5fnetinfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IDSTNetInfer.InferConfigParameter infer_config = 10;
  int infer_config_size() const;
  void clear_infer_config();
  static const int kInferConfigFieldNumber = 10;
  ::IDSTNetInfer::InferConfigParameter* mutable_infer_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::InferConfigParameter >*
      mutable_infer_config();
  const ::IDSTNetInfer::InferConfigParameter& infer_config(int index) const;
  ::IDSTNetInfer::InferConfigParameter* add_infer_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::InferConfigParameter >&
      infer_config() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:IDSTNetInfer.NetInferParameter)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::InferConfigParameter > infer_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idst_5fnetinfer_2eproto;
};
// -------------------------------------------------------------------

class InferConfigParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IDSTNetInfer.InferConfigParameter) */ {
 public:
  InferConfigParameter();
  virtual ~InferConfigParameter();

  InferConfigParameter(const InferConfigParameter& from);
  InferConfigParameter(InferConfigParameter&& from) noexcept
    : InferConfigParameter() {
    *this = ::std::move(from);
  }

  inline InferConfigParameter& operator=(const InferConfigParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferConfigParameter& operator=(InferConfigParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InferConfigParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferConfigParameter* internal_default_instance() {
    return reinterpret_cast<const InferConfigParameter*>(
               &_InferConfigParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InferConfigParameter* other);
  friend void swap(InferConfigParameter& a, InferConfigParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InferConfigParameter* New() const final {
    return CreateMaybeMessage<InferConfigParameter>(nullptr);
  }

  InferConfigParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferConfigParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InferConfigParameter& from);
  void MergeFrom(const InferConfigParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferConfigParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IDSTNetInfer.InferConfigParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idst_5fnetinfer_2eproto);
    return ::descriptor_table_idst_5fnetinfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IDSTNetInfer.BlobShape input_shape = 9;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 9;
  ::IDSTNetInfer::BlobShape* mutable_input_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::BlobShape >*
      mutable_input_shape();
  const ::IDSTNetInfer::BlobShape& input_shape(int index) const;
  ::IDSTNetInfer::BlobShape* add_input_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::BlobShape >&
      input_shape() const;

  // repeated .IDSTNetInfer.meanParameter mean_param = 10;
  int mean_param_size() const;
  void clear_mean_param();
  static const int kMeanParamFieldNumber = 10;
  ::IDSTNetInfer::meanParameter* mutable_mean_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::meanParameter >*
      mutable_mean_param();
  const ::IDSTNetInfer::meanParameter& mean_param(int index) const;
  ::IDSTNetInfer::meanParameter* add_mean_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::meanParameter >&
      mean_param() const;

  // repeated .IDSTNetInfer.normParameter norm_param = 11;
  int norm_param_size() const;
  void clear_norm_param();
  static const int kNormParamFieldNumber = 11;
  ::IDSTNetInfer::normParameter* mutable_norm_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::normParameter >*
      mutable_norm_param();
  const ::IDSTNetInfer::normParameter& norm_param(int index) const;
  ::IDSTNetInfer::normParameter* add_norm_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::normParameter >&
      norm_param() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string infer_config_type = 2;
  void clear_infer_config_type();
  static const int kInferConfigTypeFieldNumber = 2;
  const std::string& infer_config_type() const;
  void set_infer_config_type(const std::string& value);
  void set_infer_config_type(std::string&& value);
  void set_infer_config_type(const char* value);
  void set_infer_config_type(const char* value, size_t size);
  std::string* mutable_infer_config_type();
  std::string* release_infer_config_type();
  void set_allocated_infer_config_type(std::string* infer_config_type);

  // string infer_type = 3;
  void clear_infer_type();
  static const int kInferTypeFieldNumber = 3;
  const std::string& infer_type() const;
  void set_infer_type(const std::string& value);
  void set_infer_type(std::string&& value);
  void set_infer_type(const char* value);
  void set_infer_type(const char* value, size_t size);
  std::string* mutable_infer_type();
  std::string* release_infer_type();
  void set_allocated_infer_type(std::string* infer_type);

  // string model_input_data_format = 4;
  void clear_model_input_data_format();
  static const int kModelInputDataFormatFieldNumber = 4;
  const std::string& model_input_data_format() const;
  void set_model_input_data_format(const std::string& value);
  void set_model_input_data_format(std::string&& value);
  void set_model_input_data_format(const char* value);
  void set_model_input_data_format(const char* value, size_t size);
  std::string* mutable_model_input_data_format();
  std::string* release_model_input_data_format();
  void set_allocated_model_input_data_format(std::string* model_input_data_format);

  // string model_dir = 5;
  void clear_model_dir();
  static const int kModelDirFieldNumber = 5;
  const std::string& model_dir() const;
  void set_model_dir(const std::string& value);
  void set_model_dir(std::string&& value);
  void set_model_dir(const char* value);
  void set_model_dir(const char* value, size_t size);
  std::string* mutable_model_dir();
  std::string* release_model_dir();
  void set_allocated_model_dir(std::string* model_dir);

  // string deploy_file = 6;
  void clear_deploy_file();
  static const int kDeployFileFieldNumber = 6;
  const std::string& deploy_file() const;
  void set_deploy_file(const std::string& value);
  void set_deploy_file(std::string&& value);
  void set_deploy_file(const char* value);
  void set_deploy_file(const char* value, size_t size);
  std::string* mutable_deploy_file();
  std::string* release_deploy_file();
  void set_allocated_deploy_file(std::string* deploy_file);

  // string weight_file = 7;
  void clear_weight_file();
  static const int kWeightFileFieldNumber = 7;
  const std::string& weight_file() const;
  void set_weight_file(const std::string& value);
  void set_weight_file(std::string&& value);
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  std::string* mutable_weight_file();
  std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);

  // string server_addr = 12;
  void clear_server_addr();
  static const int kServerAddrFieldNumber = 12;
  const std::string& server_addr() const;
  void set_server_addr(const std::string& value);
  void set_server_addr(std::string&& value);
  void set_server_addr(const char* value);
  void set_server_addr(const char* value, size_t size);
  std::string* mutable_server_addr();
  std::string* release_server_addr();
  void set_allocated_server_addr(std::string* server_addr);

  // uint32 batch_size = 8;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 server_port = 13;
  void clear_server_port();
  static const int kServerPortFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 max_concurrency = 14;
  void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concurrency() const;
  void set_max_concurrency(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 input_num = 15;
  void clear_input_num();
  static const int kInputNumFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_num() const;
  void set_input_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 output_num = 16;
  void clear_output_num();
  static const int kOutputNumFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_num() const;
  void set_output_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IDSTNetInfer.InferConfigParameter)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::BlobShape > input_shape_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::meanParameter > mean_param_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::normParameter > norm_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr infer_config_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr infer_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_input_data_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deploy_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concurrency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idst_5fnetinfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.BlobShape.dim)
}
inline void BlobShape::add_dim(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:IDSTNetInfer.BlobShape.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.BlobShape.dim)
  return dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// meanParameter

// repeated float mean = 1;
inline int meanParameter::mean_size() const {
  return mean_.size();
}
inline void meanParameter::clear_mean() {
  mean_.Clear();
}
inline float meanParameter::mean(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.meanParameter.mean)
  return mean_.Get(index);
}
inline void meanParameter::set_mean(int index, float value) {
  mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.meanParameter.mean)
}
inline void meanParameter::add_mean(float value) {
  mean_.Add(value);
  // @@protoc_insertion_point(field_add:IDSTNetInfer.meanParameter.mean)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
meanParameter::mean() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.meanParameter.mean)
  return mean_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
meanParameter::mutable_mean() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.meanParameter.mean)
  return &mean_;
}

// -------------------------------------------------------------------

// normParameter

// repeated float norm = 1;
inline int normParameter::norm_size() const {
  return norm_.size();
}
inline void normParameter::clear_norm() {
  norm_.Clear();
}
inline float normParameter::norm(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.normParameter.norm)
  return norm_.Get(index);
}
inline void normParameter::set_norm(int index, float value) {
  norm_.Set(index, value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.normParameter.norm)
}
inline void normParameter::add_norm(float value) {
  norm_.Add(value);
  // @@protoc_insertion_point(field_add:IDSTNetInfer.normParameter.norm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
normParameter::norm() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.normParameter.norm)
  return norm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
normParameter::mutable_norm() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.normParameter.norm)
  return &norm_;
}

// -------------------------------------------------------------------

// NetInferParameter

// string name = 1;
inline void NetInferParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetInferParameter::name() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.NetInferParameter.name)
  return name_.GetNoArena();
}
inline void NetInferParameter::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.NetInferParameter.name)
}
inline void NetInferParameter::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.NetInferParameter.name)
}
inline void NetInferParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.NetInferParameter.name)
}
inline void NetInferParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.NetInferParameter.name)
}
inline std::string* NetInferParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.NetInferParameter.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetInferParameter::release_name() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.NetInferParameter.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetInferParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.NetInferParameter.name)
}

// repeated .IDSTNetInfer.InferConfigParameter infer_config = 10;
inline int NetInferParameter::infer_config_size() const {
  return infer_config_.size();
}
inline void NetInferParameter::clear_infer_config() {
  infer_config_.Clear();
}
inline ::IDSTNetInfer::InferConfigParameter* NetInferParameter::mutable_infer_config(int index) {
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.NetInferParameter.infer_config)
  return infer_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::InferConfigParameter >*
NetInferParameter::mutable_infer_config() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.NetInferParameter.infer_config)
  return &infer_config_;
}
inline const ::IDSTNetInfer::InferConfigParameter& NetInferParameter::infer_config(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.NetInferParameter.infer_config)
  return infer_config_.Get(index);
}
inline ::IDSTNetInfer::InferConfigParameter* NetInferParameter::add_infer_config() {
  // @@protoc_insertion_point(field_add:IDSTNetInfer.NetInferParameter.infer_config)
  return infer_config_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::InferConfigParameter >&
NetInferParameter::infer_config() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.NetInferParameter.infer_config)
  return infer_config_;
}

// -------------------------------------------------------------------

// InferConfigParameter

// string name = 1;
inline void InferConfigParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::name() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.name)
  return name_.GetNoArena();
}
inline void InferConfigParameter::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.name)
}
inline void InferConfigParameter::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.name)
}
inline void InferConfigParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.name)
}
inline void InferConfigParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.name)
}
inline std::string* InferConfigParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_name() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.name)
}

// string infer_config_type = 2;
inline void InferConfigParameter::clear_infer_config_type() {
  infer_config_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::infer_config_type() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.infer_config_type)
  return infer_config_type_.GetNoArena();
}
inline void InferConfigParameter::set_infer_config_type(const std::string& value) {
  
  infer_config_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.infer_config_type)
}
inline void InferConfigParameter::set_infer_config_type(std::string&& value) {
  
  infer_config_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.infer_config_type)
}
inline void InferConfigParameter::set_infer_config_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  infer_config_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.infer_config_type)
}
inline void InferConfigParameter::set_infer_config_type(const char* value, size_t size) {
  
  infer_config_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.infer_config_type)
}
inline std::string* InferConfigParameter::mutable_infer_config_type() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.infer_config_type)
  return infer_config_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_infer_config_type() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.infer_config_type)
  
  return infer_config_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_infer_config_type(std::string* infer_config_type) {
  if (infer_config_type != nullptr) {
    
  } else {
    
  }
  infer_config_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), infer_config_type);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.infer_config_type)
}

// string infer_type = 3;
inline void InferConfigParameter::clear_infer_type() {
  infer_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::infer_type() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.infer_type)
  return infer_type_.GetNoArena();
}
inline void InferConfigParameter::set_infer_type(const std::string& value) {
  
  infer_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.infer_type)
}
inline void InferConfigParameter::set_infer_type(std::string&& value) {
  
  infer_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.infer_type)
}
inline void InferConfigParameter::set_infer_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  infer_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.infer_type)
}
inline void InferConfigParameter::set_infer_type(const char* value, size_t size) {
  
  infer_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.infer_type)
}
inline std::string* InferConfigParameter::mutable_infer_type() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.infer_type)
  return infer_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_infer_type() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.infer_type)
  
  return infer_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_infer_type(std::string* infer_type) {
  if (infer_type != nullptr) {
    
  } else {
    
  }
  infer_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), infer_type);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.infer_type)
}

// string model_input_data_format = 4;
inline void InferConfigParameter::clear_model_input_data_format() {
  model_input_data_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::model_input_data_format() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.model_input_data_format)
  return model_input_data_format_.GetNoArena();
}
inline void InferConfigParameter::set_model_input_data_format(const std::string& value) {
  
  model_input_data_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.model_input_data_format)
}
inline void InferConfigParameter::set_model_input_data_format(std::string&& value) {
  
  model_input_data_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.model_input_data_format)
}
inline void InferConfigParameter::set_model_input_data_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_input_data_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.model_input_data_format)
}
inline void InferConfigParameter::set_model_input_data_format(const char* value, size_t size) {
  
  model_input_data_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.model_input_data_format)
}
inline std::string* InferConfigParameter::mutable_model_input_data_format() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.model_input_data_format)
  return model_input_data_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_model_input_data_format() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.model_input_data_format)
  
  return model_input_data_format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_model_input_data_format(std::string* model_input_data_format) {
  if (model_input_data_format != nullptr) {
    
  } else {
    
  }
  model_input_data_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_input_data_format);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.model_input_data_format)
}

// string model_dir = 5;
inline void InferConfigParameter::clear_model_dir() {
  model_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::model_dir() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.model_dir)
  return model_dir_.GetNoArena();
}
inline void InferConfigParameter::set_model_dir(const std::string& value) {
  
  model_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.model_dir)
}
inline void InferConfigParameter::set_model_dir(std::string&& value) {
  
  model_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.model_dir)
}
inline void InferConfigParameter::set_model_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.model_dir)
}
inline void InferConfigParameter::set_model_dir(const char* value, size_t size) {
  
  model_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.model_dir)
}
inline std::string* InferConfigParameter::mutable_model_dir() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.model_dir)
  return model_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_model_dir() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.model_dir)
  
  return model_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_model_dir(std::string* model_dir) {
  if (model_dir != nullptr) {
    
  } else {
    
  }
  model_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_dir);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.model_dir)
}

// string deploy_file = 6;
inline void InferConfigParameter::clear_deploy_file() {
  deploy_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::deploy_file() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.deploy_file)
  return deploy_file_.GetNoArena();
}
inline void InferConfigParameter::set_deploy_file(const std::string& value) {
  
  deploy_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.deploy_file)
}
inline void InferConfigParameter::set_deploy_file(std::string&& value) {
  
  deploy_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.deploy_file)
}
inline void InferConfigParameter::set_deploy_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deploy_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.deploy_file)
}
inline void InferConfigParameter::set_deploy_file(const char* value, size_t size) {
  
  deploy_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.deploy_file)
}
inline std::string* InferConfigParameter::mutable_deploy_file() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.deploy_file)
  return deploy_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_deploy_file() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.deploy_file)
  
  return deploy_file_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_deploy_file(std::string* deploy_file) {
  if (deploy_file != nullptr) {
    
  } else {
    
  }
  deploy_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deploy_file);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.deploy_file)
}

// string weight_file = 7;
inline void InferConfigParameter::clear_weight_file() {
  weight_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::weight_file() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.weight_file)
  return weight_file_.GetNoArena();
}
inline void InferConfigParameter::set_weight_file(const std::string& value) {
  
  weight_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.weight_file)
}
inline void InferConfigParameter::set_weight_file(std::string&& value) {
  
  weight_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.weight_file)
}
inline void InferConfigParameter::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weight_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.weight_file)
}
inline void InferConfigParameter::set_weight_file(const char* value, size_t size) {
  
  weight_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.weight_file)
}
inline std::string* InferConfigParameter::mutable_weight_file() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.weight_file)
  return weight_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_weight_file() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.weight_file)
  
  return weight_file_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    
  } else {
    
  }
  weight_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.weight_file)
}

// uint32 batch_size = 8;
inline void InferConfigParameter::clear_batch_size() {
  batch_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferConfigParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.batch_size)
  return batch_size_;
}
inline void InferConfigParameter::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.batch_size)
}

// repeated .IDSTNetInfer.BlobShape input_shape = 9;
inline int InferConfigParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void InferConfigParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline ::IDSTNetInfer::BlobShape* InferConfigParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::BlobShape >*
InferConfigParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.InferConfigParameter.input_shape)
  return &input_shape_;
}
inline const ::IDSTNetInfer::BlobShape& InferConfigParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::IDSTNetInfer::BlobShape* InferConfigParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:IDSTNetInfer.InferConfigParameter.input_shape)
  return input_shape_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::BlobShape >&
InferConfigParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.InferConfigParameter.input_shape)
  return input_shape_;
}

// repeated .IDSTNetInfer.meanParameter mean_param = 10;
inline int InferConfigParameter::mean_param_size() const {
  return mean_param_.size();
}
inline void InferConfigParameter::clear_mean_param() {
  mean_param_.Clear();
}
inline ::IDSTNetInfer::meanParameter* InferConfigParameter::mutable_mean_param(int index) {
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.mean_param)
  return mean_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::meanParameter >*
InferConfigParameter::mutable_mean_param() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.InferConfigParameter.mean_param)
  return &mean_param_;
}
inline const ::IDSTNetInfer::meanParameter& InferConfigParameter::mean_param(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.mean_param)
  return mean_param_.Get(index);
}
inline ::IDSTNetInfer::meanParameter* InferConfigParameter::add_mean_param() {
  // @@protoc_insertion_point(field_add:IDSTNetInfer.InferConfigParameter.mean_param)
  return mean_param_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::meanParameter >&
InferConfigParameter::mean_param() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.InferConfigParameter.mean_param)
  return mean_param_;
}

// repeated .IDSTNetInfer.normParameter norm_param = 11;
inline int InferConfigParameter::norm_param_size() const {
  return norm_param_.size();
}
inline void InferConfigParameter::clear_norm_param() {
  norm_param_.Clear();
}
inline ::IDSTNetInfer::normParameter* InferConfigParameter::mutable_norm_param(int index) {
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.norm_param)
  return norm_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::normParameter >*
InferConfigParameter::mutable_norm_param() {
  // @@protoc_insertion_point(field_mutable_list:IDSTNetInfer.InferConfigParameter.norm_param)
  return &norm_param_;
}
inline const ::IDSTNetInfer::normParameter& InferConfigParameter::norm_param(int index) const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.norm_param)
  return norm_param_.Get(index);
}
inline ::IDSTNetInfer::normParameter* InferConfigParameter::add_norm_param() {
  // @@protoc_insertion_point(field_add:IDSTNetInfer.InferConfigParameter.norm_param)
  return norm_param_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IDSTNetInfer::normParameter >&
InferConfigParameter::norm_param() const {
  // @@protoc_insertion_point(field_list:IDSTNetInfer.InferConfigParameter.norm_param)
  return norm_param_;
}

// string server_addr = 12;
inline void InferConfigParameter::clear_server_addr() {
  server_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InferConfigParameter::server_addr() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.server_addr)
  return server_addr_.GetNoArena();
}
inline void InferConfigParameter::set_server_addr(const std::string& value) {
  
  server_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.server_addr)
}
inline void InferConfigParameter::set_server_addr(std::string&& value) {
  
  server_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IDSTNetInfer.InferConfigParameter.server_addr)
}
inline void InferConfigParameter::set_server_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IDSTNetInfer.InferConfigParameter.server_addr)
}
inline void InferConfigParameter::set_server_addr(const char* value, size_t size) {
  
  server_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IDSTNetInfer.InferConfigParameter.server_addr)
}
inline std::string* InferConfigParameter::mutable_server_addr() {
  
  // @@protoc_insertion_point(field_mutable:IDSTNetInfer.InferConfigParameter.server_addr)
  return server_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InferConfigParameter::release_server_addr() {
  // @@protoc_insertion_point(field_release:IDSTNetInfer.InferConfigParameter.server_addr)
  
  return server_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InferConfigParameter::set_allocated_server_addr(std::string* server_addr) {
  if (server_addr != nullptr) {
    
  } else {
    
  }
  server_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_addr);
  // @@protoc_insertion_point(field_set_allocated:IDSTNetInfer.InferConfigParameter.server_addr)
}

// uint32 server_port = 13;
inline void InferConfigParameter::clear_server_port() {
  server_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferConfigParameter::server_port() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.server_port)
  return server_port_;
}
inline void InferConfigParameter::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.server_port)
}

// uint32 max_concurrency = 14;
inline void InferConfigParameter::clear_max_concurrency() {
  max_concurrency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferConfigParameter::max_concurrency() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.max_concurrency)
  return max_concurrency_;
}
inline void InferConfigParameter::set_max_concurrency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_concurrency_ = value;
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.max_concurrency)
}

// uint32 input_num = 15;
inline void InferConfigParameter::clear_input_num() {
  input_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferConfigParameter::input_num() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.input_num)
  return input_num_;
}
inline void InferConfigParameter::set_input_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  input_num_ = value;
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.input_num)
}

// uint32 output_num = 16;
inline void InferConfigParameter::clear_output_num() {
  output_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferConfigParameter::output_num() const {
  // @@protoc_insertion_point(field_get:IDSTNetInfer.InferConfigParameter.output_num)
  return output_num_;
}
inline void InferConfigParameter::set_output_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_num_ = value;
  // @@protoc_insertion_point(field_set:IDSTNetInfer.InferConfigParameter.output_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IDSTNetInfer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_idst_5fnetinfer_2eproto
