// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parser.proto

#include "parser.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ParserModel {
constexpr BlobShape::BlobShape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dim_()
  , _dim_cached_byte_size_(){}
struct BlobShapeDefaultTypeInternal {
  constexpr BlobShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlobShapeDefaultTypeInternal() {}
  union {
    BlobShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
constexpr meanParameter::meanParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mean_()
  , _mean_cached_byte_size_(){}
struct meanParameterDefaultTypeInternal {
  constexpr meanParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~meanParameterDefaultTypeInternal() {}
  union {
    meanParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT meanParameterDefaultTypeInternal _meanParameter_default_instance_;
constexpr normParameter::normParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : norm_()
  , _norm_cached_byte_size_(){}
struct normParameterDefaultTypeInternal {
  constexpr normParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~normParameterDefaultTypeInternal() {}
  union {
    normParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT normParameterDefaultTypeInternal _normParameter_default_instance_;
constexpr ModelParameter::ModelParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infer_config_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModelParameterDefaultTypeInternal {
  constexpr ModelParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelParameterDefaultTypeInternal() {}
  union {
    ModelParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelParameterDefaultTypeInternal _ModelParameter_default_instance_;
constexpr InferConfigParameter::InferConfigParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_shape_()
  , output_shape_()
  , mean_param_()
  , norm_param_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , infer_config_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , infer_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_input_data_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_size_(0u)
  , max_concurrency_(0u)
  , model_position_(0u){}
struct InferConfigParameterDefaultTypeInternal {
  constexpr InferConfigParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferConfigParameterDefaultTypeInternal() {}
  union {
    InferConfigParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferConfigParameterDefaultTypeInternal _InferConfigParameter_default_instance_;
}  // namespace ParserModel
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parser_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_parser_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parser_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_parser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParserModel::BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParserModel::BlobShape, dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParserModel::meanParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParserModel::meanParameter, mean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParserModel::normParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParserModel::normParameter, norm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParserModel::ModelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParserModel::ModelParameter, name_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::ModelParameter, infer_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, name_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, infer_config_type_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, infer_type_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, model_input_data_format_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, model_binary_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, weight_file_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, batch_size_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, input_shape_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, output_shape_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, mean_param_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, norm_param_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, max_concurrency_),
  PROTOBUF_FIELD_OFFSET(::ParserModel::InferConfigParameter, model_position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ParserModel::BlobShape)},
  { 6, -1, sizeof(::ParserModel::meanParameter)},
  { 12, -1, sizeof(::ParserModel::normParameter)},
  { 18, -1, sizeof(::ParserModel::ModelParameter)},
  { 25, -1, sizeof(::ParserModel::InferConfigParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ParserModel::_BlobShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ParserModel::_meanParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ParserModel::_normParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ParserModel::_ModelParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ParserModel::_InferConfigParameter_default_instance_),
};

const char descriptor_table_protodef_parser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014parser.proto\022\013ParserModel\"\034\n\tBlobShape"
  "\022\017\n\003dim\030\001 \003(\003B\002\020\001\"\035\n\rmeanParameter\022\014\n\004me"
  "an\030\001 \003(\002\"\035\n\rnormParameter\022\014\n\004norm\030\001 \003(\002\""
  "W\n\016ModelParameter\022\014\n\004name\030\001 \001(\t\0227\n\014infer"
  "_config\030\002 \003(\0132!.ParserModel.InferConfigP"
  "arameter\"\237\003\n\024InferConfigParameter\022\014\n\004nam"
  "e\030\001 \001(\t\022\031\n\021infer_config_type\030\002 \001(\t\022\022\n\nin"
  "fer_type\030\003 \001(\t\022\037\n\027model_input_data_forma"
  "t\030\004 \001(\t\022\024\n\014model_binary\030\005 \001(\t\022\023\n\013weight_"
  "file\030\006 \001(\t\022\022\n\nbatch_size\030\007 \001(\r\022+\n\013input_"
  "shape\030\010 \003(\0132\026.ParserModel.BlobShape\022,\n\014o"
  "utput_shape\030\t \003(\0132\026.ParserModel.BlobShap"
  "e\022.\n\nmean_param\030\n \003(\0132\032.ParserModel.mean"
  "Parameter\022.\n\nnorm_param\030\013 \003(\0132\032.ParserMo"
  "del.normParameter\022\027\n\017max_concurrency\030\014 \001"
  "(\r\022\026\n\016model_position\030\r \001(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parser_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parser_2eproto = {
  false, false, 634, descriptor_table_protodef_parser_2eproto, "parser.proto", 
  &descriptor_table_parser_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_parser_2eproto::offsets,
  file_level_metadata_parser_2eproto, file_level_enum_descriptors_parser_2eproto, file_level_service_descriptors_parser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_parser_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parser_2eproto);
  return descriptor_table_parser_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_parser_2eproto(&descriptor_table_parser_2eproto);
namespace ParserModel {

// ===================================================================

class BlobShape::_Internal {
 public:
};

BlobShape::BlobShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParserModel.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ParserModel.BlobShape)
}

void BlobShape::SharedCtor() {
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:ParserModel.BlobShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlobShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlobShape::ArenaDtor(void* object) {
  BlobShape* _this = reinterpret_cast< BlobShape* >(object);
  (void)_this;
}
void BlobShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlobShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:ParserModel.BlobShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dim = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParserModel.BlobShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParserModel.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParserModel.BlobShape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParserModel.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParserModel.BlobShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParserModel.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParserModel.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void BlobShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParserModel.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParserModel.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::InternalSwap(BlobShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class meanParameter::_Internal {
 public:
};

meanParameter::meanParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mean_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParserModel.meanParameter)
}
meanParameter::meanParameter(const meanParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mean_(from.mean_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ParserModel.meanParameter)
}

void meanParameter::SharedCtor() {
}

meanParameter::~meanParameter() {
  // @@protoc_insertion_point(destructor:ParserModel.meanParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void meanParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void meanParameter::ArenaDtor(void* object) {
  meanParameter* _this = reinterpret_cast< meanParameter* >(object);
  (void)_this;
}
void meanParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void meanParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void meanParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ParserModel.meanParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* meanParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mean(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_mean(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* meanParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParserModel.meanParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mean = 1;
  if (this->_internal_mean_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_mean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParserModel.meanParameter)
  return target;
}

size_t meanParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParserModel.meanParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mean_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mean_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void meanParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParserModel.meanParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const meanParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<meanParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParserModel.meanParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParserModel.meanParameter)
    MergeFrom(*source);
  }
}

void meanParameter::MergeFrom(const meanParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParserModel.meanParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_.MergeFrom(from.mean_);
}

void meanParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParserModel.meanParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meanParameter::CopyFrom(const meanParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParserModel.meanParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meanParameter::IsInitialized() const {
  return true;
}

void meanParameter::InternalSwap(meanParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mean_.InternalSwap(&other->mean_);
}

::PROTOBUF_NAMESPACE_ID::Metadata meanParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class normParameter::_Internal {
 public:
};

normParameter::normParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  norm_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParserModel.normParameter)
}
normParameter::normParameter(const normParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      norm_(from.norm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ParserModel.normParameter)
}

void normParameter::SharedCtor() {
}

normParameter::~normParameter() {
  // @@protoc_insertion_point(destructor:ParserModel.normParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void normParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void normParameter::ArenaDtor(void* object) {
  normParameter* _this = reinterpret_cast< normParameter* >(object);
  (void)_this;
}
void normParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void normParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void normParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ParserModel.normParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  norm_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* normParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float norm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_norm(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_norm(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* normParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParserModel.normParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float norm = 1;
  if (this->_internal_norm_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParserModel.normParameter)
  return target;
}

size_t normParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParserModel.normParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float norm = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_norm_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _norm_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void normParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParserModel.normParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const normParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<normParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParserModel.normParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParserModel.normParameter)
    MergeFrom(*source);
  }
}

void normParameter::MergeFrom(const normParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParserModel.normParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  norm_.MergeFrom(from.norm_);
}

void normParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParserModel.normParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void normParameter::CopyFrom(const normParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParserModel.normParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool normParameter::IsInitialized() const {
  return true;
}

void normParameter::InternalSwap(normParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  norm_.InternalSwap(&other->norm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata normParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelParameter::_Internal {
 public:
};

ModelParameter::ModelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infer_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParserModel.ModelParameter)
}
ModelParameter::ModelParameter(const ModelParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infer_config_(from.infer_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ParserModel.ModelParameter)
}

void ModelParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelParameter::~ModelParameter() {
  // @@protoc_insertion_point(destructor:ParserModel.ModelParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelParameter::ArenaDtor(void* object) {
  ModelParameter* _this = reinterpret_cast< ModelParameter* >(object);
  (void)_this;
}
void ModelParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ParserModel.ModelParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infer_config_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.ModelParameter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ParserModel.InferConfigParameter infer_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infer_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParserModel.ModelParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.ModelParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .ParserModel.InferConfigParameter infer_config = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infer_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infer_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParserModel.ModelParameter)
  return target;
}

size_t ModelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParserModel.ModelParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParserModel.InferConfigParameter infer_config = 2;
  total_size += 1UL * this->_internal_infer_config_size();
  for (const auto& msg : this->infer_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParserModel.ModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParserModel.ModelParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParserModel.ModelParameter)
    MergeFrom(*source);
  }
}

void ModelParameter::MergeFrom(const ModelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParserModel.ModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infer_config_.MergeFrom(from.infer_config_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ModelParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParserModel.ModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParameter::CopyFrom(const ModelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParserModel.ModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParameter::IsInitialized() const {
  return true;
}

void ModelParameter::InternalSwap(ModelParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infer_config_.InternalSwap(&other->infer_config_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InferConfigParameter::_Internal {
 public:
};

InferConfigParameter::InferConfigParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_shape_(arena),
  output_shape_(arena),
  mean_param_(arena),
  norm_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParserModel.InferConfigParameter)
}
InferConfigParameter::InferConfigParameter(const InferConfigParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_shape_(from.input_shape_),
      output_shape_(from.output_shape_),
      mean_param_(from.mean_param_),
      norm_param_(from.norm_param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  infer_config_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_infer_config_type().empty()) {
    infer_config_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_infer_config_type(), 
      GetArena());
  }
  infer_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_infer_type().empty()) {
    infer_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_infer_type(), 
      GetArena());
  }
  model_input_data_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_input_data_format().empty()) {
    model_input_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_input_data_format(), 
      GetArena());
  }
  model_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_binary().empty()) {
    model_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_binary(), 
      GetArena());
  }
  weight_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_weight_file().empty()) {
    weight_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_weight_file(), 
      GetArena());
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_position_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(model_position_));
  // @@protoc_insertion_point(copy_constructor:ParserModel.InferConfigParameter)
}

void InferConfigParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
infer_config_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
infer_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_input_data_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
weight_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_position_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(model_position_));
}

InferConfigParameter::~InferConfigParameter() {
  // @@protoc_insertion_point(destructor:ParserModel.InferConfigParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InferConfigParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  infer_config_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  infer_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_input_data_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InferConfigParameter::ArenaDtor(void* object) {
  InferConfigParameter* _this = reinterpret_cast< InferConfigParameter* >(object);
  (void)_this;
}
void InferConfigParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferConfigParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferConfigParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ParserModel.InferConfigParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_shape_.Clear();
  output_shape_.Clear();
  mean_param_.Clear();
  norm_param_.Clear();
  name_.ClearToEmpty();
  infer_config_type_.ClearToEmpty();
  infer_type_.ClearToEmpty();
  model_input_data_format_.ClearToEmpty();
  model_binary_.ClearToEmpty();
  weight_file_.ClearToEmpty();
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_position_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(model_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferConfigParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.InferConfigParameter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string infer_config_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_infer_config_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.InferConfigParameter.infer_config_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string infer_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_infer_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.InferConfigParameter.infer_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_input_data_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_input_data_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.InferConfigParameter.model_input_data_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_binary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_model_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.InferConfigParameter.model_binary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string weight_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_weight_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParserModel.InferConfigParameter.weight_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ParserModel.BlobShape input_shape = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ParserModel.BlobShape output_shape = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ParserModel.meanParameter mean_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mean_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ParserModel.normParameter norm_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_norm_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 max_concurrency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          max_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 model_position = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          model_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferConfigParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParserModel.InferConfigParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.InferConfigParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string infer_config_type = 2;
  if (this->infer_config_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_infer_config_type().data(), static_cast<int>(this->_internal_infer_config_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.InferConfigParameter.infer_config_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_infer_config_type(), target);
  }

  // string infer_type = 3;
  if (this->infer_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_infer_type().data(), static_cast<int>(this->_internal_infer_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.InferConfigParameter.infer_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_infer_type(), target);
  }

  // string model_input_data_format = 4;
  if (this->model_input_data_format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_input_data_format().data(), static_cast<int>(this->_internal_model_input_data_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.InferConfigParameter.model_input_data_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_input_data_format(), target);
  }

  // string model_binary = 5;
  if (this->model_binary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_binary().data(), static_cast<int>(this->_internal_model_binary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.InferConfigParameter.model_binary");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_model_binary(), target);
  }

  // string weight_file = 6;
  if (this->weight_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weight_file().data(), static_cast<int>(this->_internal_weight_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ParserModel.InferConfigParameter.weight_file");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_weight_file(), target);
  }

  // uint32 batch_size = 7;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_batch_size(), target);
  }

  // repeated .ParserModel.BlobShape input_shape = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_input_shape(i), target, stream);
  }

  // repeated .ParserModel.BlobShape output_shape = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_output_shape(i), target, stream);
  }

  // repeated .ParserModel.meanParameter mean_param = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mean_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_mean_param(i), target, stream);
  }

  // repeated .ParserModel.normParameter norm_param = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_norm_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_norm_param(i), target, stream);
  }

  // uint32 max_concurrency = 12;
  if (this->max_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_concurrency(), target);
  }

  // uint32 model_position = 13;
  if (this->model_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_model_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParserModel.InferConfigParameter)
  return target;
}

size_t InferConfigParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParserModel.InferConfigParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ParserModel.BlobShape input_shape = 8;
  total_size += 1UL * this->_internal_input_shape_size();
  for (const auto& msg : this->input_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ParserModel.BlobShape output_shape = 9;
  total_size += 1UL * this->_internal_output_shape_size();
  for (const auto& msg : this->output_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ParserModel.meanParameter mean_param = 10;
  total_size += 1UL * this->_internal_mean_param_size();
  for (const auto& msg : this->mean_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ParserModel.normParameter norm_param = 11;
  total_size += 1UL * this->_internal_norm_param_size();
  for (const auto& msg : this->norm_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string infer_config_type = 2;
  if (this->infer_config_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_infer_config_type());
  }

  // string infer_type = 3;
  if (this->infer_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_infer_type());
  }

  // string model_input_data_format = 4;
  if (this->model_input_data_format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_input_data_format());
  }

  // string model_binary = 5;
  if (this->model_binary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_binary());
  }

  // string weight_file = 6;
  if (this->weight_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weight_file());
  }

  // uint32 batch_size = 7;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  // uint32 max_concurrency = 12;
  if (this->max_concurrency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_concurrency());
  }

  // uint32 model_position = 13;
  if (this->model_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InferConfigParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParserModel.InferConfigParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InferConfigParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InferConfigParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParserModel.InferConfigParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParserModel.InferConfigParameter)
    MergeFrom(*source);
  }
}

void InferConfigParameter::MergeFrom(const InferConfigParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParserModel.InferConfigParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_shape_.MergeFrom(from.input_shape_);
  output_shape_.MergeFrom(from.output_shape_);
  mean_param_.MergeFrom(from.mean_param_);
  norm_param_.MergeFrom(from.norm_param_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.infer_config_type().size() > 0) {
    _internal_set_infer_config_type(from._internal_infer_config_type());
  }
  if (from.infer_type().size() > 0) {
    _internal_set_infer_type(from._internal_infer_type());
  }
  if (from.model_input_data_format().size() > 0) {
    _internal_set_model_input_data_format(from._internal_model_input_data_format());
  }
  if (from.model_binary().size() > 0) {
    _internal_set_model_binary(from._internal_model_binary());
  }
  if (from.weight_file().size() > 0) {
    _internal_set_weight_file(from._internal_weight_file());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  if (from.max_concurrency() != 0) {
    _internal_set_max_concurrency(from._internal_max_concurrency());
  }
  if (from.model_position() != 0) {
    _internal_set_model_position(from._internal_model_position());
  }
}

void InferConfigParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParserModel.InferConfigParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferConfigParameter::CopyFrom(const InferConfigParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParserModel.InferConfigParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferConfigParameter::IsInitialized() const {
  return true;
}

void InferConfigParameter::InternalSwap(InferConfigParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_shape_.InternalSwap(&other->input_shape_);
  output_shape_.InternalSwap(&other->output_shape_);
  mean_param_.InternalSwap(&other->mean_param_);
  norm_param_.InternalSwap(&other->norm_param_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  infer_config_type_.Swap(&other->infer_config_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  infer_type_.Swap(&other->infer_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_input_data_format_.Swap(&other->model_input_data_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_binary_.Swap(&other->model_binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  weight_file_.Swap(&other->weight_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferConfigParameter, model_position_)
      + sizeof(InferConfigParameter::model_position_)
      - PROTOBUF_FIELD_OFFSET(InferConfigParameter, batch_size_)>(
          reinterpret_cast<char*>(&batch_size_),
          reinterpret_cast<char*>(&other->batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferConfigParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ParserModel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ParserModel::BlobShape* Arena::CreateMaybeMessage< ::ParserModel::BlobShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParserModel::BlobShape >(arena);
}
template<> PROTOBUF_NOINLINE ::ParserModel::meanParameter* Arena::CreateMaybeMessage< ::ParserModel::meanParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParserModel::meanParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ParserModel::normParameter* Arena::CreateMaybeMessage< ::ParserModel::normParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParserModel::normParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ParserModel::ModelParameter* Arena::CreateMaybeMessage< ::ParserModel::ModelParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParserModel::ModelParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ParserModel::InferConfigParameter* Arena::CreateMaybeMessage< ::ParserModel::InferConfigParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ParserModel::InferConfigParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
